---
# This template configures each role to use Vlans on a single nic for
# each isolated network, but uses multiple nic's on each node:
#
# nic1 = pxe/management/ctlplane
# nic2 = VLAN trunk for network isolation
# nic3 = public/external access
#
# This template assumes use of network-isolation.yaml.
#
# FIXME: if/when we add functionality to heatclient to include heat
# environment files we should think about using it here to automatically
# include network-isolation.yaml.
resource_registry:
{% if composable_roles == true %}
{% for machine_type in machine_types %}
  OS::TripleO::Compute{{ machine_type }}::Net::SoftwareConfig: vlans/{%raw%}{{ nics_subfolder }}{%endraw%}/compute_{{ machine_type }}.yaml
{% endfor %}
{% else %}
  OS::TripleO::Compute::Net::SoftwareConfig: vlans/{%raw%}{{ nics_subfolder }}{%endraw%}/compute.yaml
{% endif %}

{% if manila_enabled %}
  OS::TripleO::ControllerStorageNfs::Net::SoftwareConfig: vlans/{%raw%}{{ nics_subfolder }}{%endraw%}/controller.yaml
{% else %}
  OS::TripleO::Controller::Net::SoftwareConfig: vlans/{%raw%}{{ nics_subfolder }}{%endraw%}/controller.yaml
{% endif %}

{% if ceph_enabled %}
  OS::TripleO::CephStorage::Net::SoftwareConfig: vlans/{%raw%}{{ nics_subfolder }}{%endraw%}/ceph-storage.yaml
{% endif %}
{% if composable_roles == true and passthrough_nvme is defined and pci_node_type is defined %}
  OS::TripleO::Compute{{ pci_node_type }}PCI::Net::SoftwareConfig: vlans/{%raw%}{{ nics_subfolder }}{%endraw%}/compute_{{ pci_node_type }}.yaml
{% endif %}

parameter_defaults:
{%raw%}{% if not install.network.render.templates|default(False) %} {%endraw%}

    ExternalNetCidr: {{ external_net_cidr }}
    ExternalAllocationPools: [{'start': '{{ external_allocation_pools_start }}', 'end': '{{ external_allocation_pools_end }}' }]
    ExternalInterfaceDefaultRoute: {{ external_interface_default_route }}
{% if external_network_vlan_id is defined %}
    ExternalNetworkVlanID: {{ external_network_vlan_id }}
{% endif %}
    InternalApiNetCidr: {{ internal_api_net_cidr }}
    InternalApiAllocationPools: [{'start': '{{ internal_api_allocation_pools_start }}', 'end': '{{ internal_api_allocation_pools_end }}' }]
    InternalApiNetworkVlanID: {{ internal_api_network_vlan_id }}
    StorageNetCidr: {{ storage_net_cidr }}
    StorageAllocationPools: [{'start': '{{ storage_allocation_pools_start }}', 'end': '{{ storage_allocation_pools_end }}' }]
    StorageNetworkVlanID: {{ storage_network_vlan_id }}
    StorageMgmtNetCidr: {{ storage_mgmt_net_cidr }}
    StorageMgmtAllocationPools: [{'start': '{{ storage_mgmt_allocation_pools_start }}', 'end': '{{ storage_mgmt_allocation_pools_end }}' }]
    StorageMgmtNetworkVlanID: {{ storage_mgmt_network_vlan_id }}
    TenantNetCidr: {{ tenant_net_cidr }}
    TenantAllocationPools: [{'start': '{{ tenant_allocation_pools_start }}', 'end': '{{ tenant_allocation_pools_end }}'}]
    TenantNetworkVlanID: {{ tenant_network_vlan_id }}
{%raw%}{% endif %}{%endraw%}

{% if manila_enabled %}

    StorageNFSNetCidr: {{ storage_nfs_net_cidr }}
    StorageNFSNetworkVlanID: {{ storage_nfs_network_vlan_id }}
    StorageNFSAllocationPools: [{'start': '{{ storage_nfs_allocation_pools_start }}', 'end': '{{ storage_nfs_allocation_pools_end }}'}]

    NeutronBridgeMappings: datacentre:br-ex,storage:br-isolated
    NeutronNetworkVLANRanges: datacentre:1:1000,storage:300:1500
{% endif %}

    DnsServers: ['{{ gateway }}']
    EC2MetadataIp: {{ gateway }}
{%raw%}{% if install.splitstack|default(False) %}
    ControlPlaneDefaultRoute: {{ ansible_host|default(ansible_ssh_host) }}
{% else %}{%endraw%}

    ControlPlaneDefaultRoute: {{ gateway }}
{%raw%}{% endif %}{%endraw%}

    ControlPlaneSubnetCidr: "{{ subnet_mask }}"

{% if dvr_enabled == true %}

    NeutronBridgeMappings: "datacentre:br-ex,tenant:br-tenant"
    NeutronEnableDVR: 'true'
{% endif %}
