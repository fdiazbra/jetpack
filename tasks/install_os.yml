---
- name: set os_search_string
  set_fact:
    os_search_string: "{{ ('CentOS' in needed_os) | ternary('CentOS', 'Red Hat Enterprise Linux') }}"

- name: check redhat release in hypervsior as root and stack users
  shell: |
    sshpass -p {{ item[0] }}  ssh -o 'PreferredAuthentications=password' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -q {{ item[1] }}@{{ hypervisor_host }} 'cat /etc/redhat-release'
  register: rhel_release
  with_together:
    - [ "{{ hypervisor_password }}", 'stack']
    - ['root', 'stack']
  ignore_errors: true

- name: set rhel_stdout
  set_fact:
    rhel_stdout: "{{ (rhel_release.results[0].stdout) | ternary(rhel_release.results[0].stdout, rhel_release.results[1].stdout) }}"

# Foreman does not have RHEL 8.4. So we need to install the previous version and upgrade later.
# We don't install RHEL 8.2 or RHEL 8.4 when the host already has this for OSP16.2.
- name: set os_install when installed OS version not matching with the needed (RHEL < 9.0)
  vars:
    lab_available_os: "{{ (needed_os == 'RHEL 8.4') | ternary('RHEL 8.2', needed_os) }}"
  set_fact:
    os_install: "{{ lab_available_os }}"
  when: ((force_reprovision == true) or (hypervisor_host == idm_host_fqdn or rhel_stdout == "" or ((needed_os.split()[1] not in rhel_stdout) and (lab_available_os.split()[1] not in rhel_stdout)) or (os_search_string not in rhel_stdout))) and (needed_os.split()[1] is version('9.0', '<'))

# Foreman does not have RHEL 9.2. So we need to install the previous version and upgrade later.
# We don't install RHEL 9.0 or RHEL 9.2 when the host already has this for OSP17.1.
- name: set os_install when installed OS version not matching with the needed (RHEL >= 9.0)
  vars:
    lab_available_os: "{{ (needed_os == 'RHEL 9.2') | ternary('RHEL 9.0', needed_os) }}"
  set_fact:
    os_install: "{{ lab_available_os }}"
  when: ((force_reprovision == true) or (hypervisor_host == idm_host_fqdn or rhel_stdout == "" or ((needed_os.split()[1] not in rhel_stdout) and (lab_available_os.split()[1] not in rhel_stdout)) or (os_search_string not in rhel_stdout))) and (needed_os.split()[1] is version('9.0', '>='))

- name: set upgrade_os
  set_fact:
    upgrade_os: "{{ needed_os.split()[1] }}"
  when: ((needed_os == 'RHEL 8.4') and ((os_install is defined) or ('8.2' in rhel_stdout))) or ((needed_os == 'RHEL 9.2') and ((os_install is defined) or ('9.0' in rhel_stdout)))

- name: Reboot if OS install needed
  block:
    - name: delete overcloud before re install undercloud
      shell: |
        ssh -o 'PreferredAuthentications=publickey' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -i ~/.ssh/id_rsa stack@{{ undercloud_hostname }} 'source ~/stackrc && openstack overcloud delete overcloud -y'
      ignore_errors: true
      when: hypervisor_host == undercloud_hostname and osp_release|int < 17

    - name: delete overcloud before re install undercloud (OSP17)
      shell: |
        ssh -o 'PreferredAuthentications=publickey' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -i ~/.ssh/id_rsa stack@{{ undercloud_hostname }} 'source ~/stackrc && openstack overcloud delete overcloud -y -b ~/virt/network/baremetal_deployment.yaml  --networks-file ~/virt/network/network_data_v2.yaml --network-ports'
      ignore_errors: true
      when: hypervisor_host == undercloud_hostname and osp_release|int >= 17

    - name: Build the images for hammercli
      shell: podman build --build-arg foreman_url={{ foreman_url }} -t hammercli .
      args:
        chdir: "{{ playbook_dir }}/hammer"
    - name: set hammer build command
      vars:
        medium: "{{ ('CentOS' in os_install) | ternary('CentOS Local', 'RHEL Local') }}"
      set_fact:
        hammer_build_cmd: "hammer -u {{ cloud_name }} -p {{ chassis_password }}  host update --name {{ hypervisor_host }} --build 1 --operatingsystem '{{ os_install }}' --medium '{{ medium }}' --partition-table 'generic-rhel' --overwrite 1"
      when: lab_name == "scale" and osp_release|int < 17

    - name: set hammer build command (OSP17)
      vars:
        medium: "{{ ('CentOS' in os_install) | ternary('CentOS Local', 'RHEL Local') }}"
      set_fact:
        hammer_build_cmd: "hammer -u {{ cloud_name }} -p {{ chassis_password }}  host update --name {{ hypervisor_host }} --build 1 --operatingsystem '{{ os_install }}' --medium '{{ medium }}' --partition-table 'RHEL9-ONLY' --overwrite 1"
      when: lab_name == "scale"  and osp_release|int == 17

    - name: set hammer build params
      vars:
        medium: "{{ ('CentOS' in os_install) | ternary('CentOS mirror', 'rhel_local') }}"
      set_fact:
        hammer_build_cmd: "hammer -u {{ cloud_name }} -p {{ chassis_password }}  host update --name {{ hypervisor_host }} --build 1 --operatingsystem '{{ os_install }}' --medium '{{ medium }}' --partition-table 'ALIAS-Partition' --overwrite 1"
      when: lab_name == "alias"

    - name: update host to install new os
      shell: |
        podman run --rm --sdnotify=ignore hammercli {{ hammer_build_cmd }}
      when: ansible_distribution_major_version >= '8'

    - name: update host to install new os
      shell: |
        podman run --rm hammercli {{ hammer_build_cmd }}
      when: ansible_distribution_major_version < '8'

    - name: set hypervisor host to PXE boot (Supermicro)
      shell: ipmitool -I lanplus -H mgmt-{{ hypervisor_host }} -U quads -P {{ chassis_password }} chassis bootdev pxe options=persistent
      when: vendor is defined and vendor == "supermicro"

    - name: power cycle hypervisor host (Supermicro)
      shell: ipmitool -I lanplus -H mgmt-{{ hypervisor_host }} -U quads -P {{ chassis_password }} chassis power cycle
      when: vendor is defined and vendor == "supermicro"

    - name: set hypervisor host to PXE boot off Foreman (Dell)
      become: yes
      shell: podman run -it --rm quay.io/quads/badfish -H mgmt-{{ hypervisor_host }} -u quads -p {{ chassis_password }} -i config/idrac_interfaces.yml -t foreman --pxe
      when: vendor is defined and vendor == "dell"
      retries: 5
      delay: 3
      register: result
      until: result.rc == 0

    - name: power cycle hypervisor (Dell)
      become: yes
      shell: podman run -it --rm quay.io/quads/badfish -H mgmt-{{ hypervisor_host }} -u quads -p {{ chassis_password }} --power-cycle
      when: vendor is defined and vendor == "dell"

    - name: wait for 120 seconds before checking for hypervisor
      wait_for:
        timeout: 120
  when: (os_install is defined)

- name: waiting for the hypervisor to be available
  wait_for:
    port: 22
    host: "{{ hypervisor_host }}"
    timeout: 3000
    connect_timeout: 30
    sleep: 5
  register: hyp_reachable
  delegate_to: localhost
  async: 3000
  poll: 0

- name: save install jids
  set_fact:
    async_install: "{{ async_install|default([]) + [hyp_reachable.ansible_job_id] }}"

- name: Wait for undercloud/IdM host to be available
  async_status:
    jid: "{{ item }}"
  register: install_uc
  until: install_uc.finished
  retries: 300
  delay: 10
  with_items: "{{ async_install }}"

- name: upgrade os and reboot
  block:
    - name: upgrade os
      shell: |
        sshpass -p {{ hypervisor_password }}  ssh -o 'PreferredAuthentications=password' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -q root@{{ hypervisor_host }} '/root/update-latest-rhel-release.sh {{ upgrade_os }} && dnf update -y && reboot'
      ignore_errors: true

    - include_tasks: tasks/wait_after_node_reboot.yml
  when: upgrade_os is defined
